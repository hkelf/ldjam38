require('meteor');

MeteorsManager = #;

let MAX_SPAWN_NUMBER = 3;
let METEORS_SPAWN_SETS = #{
    #{
        nb_of_spanws: 3,
        spawn_sizes: #{1, 1, 1},
        meteors: #{
            #{terraformation: Meteor.TYPE.TERRAFORMATION.MOUNTAIN, effect: Meteor.TYPE.EFFECT.NEUTRAL},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.MOUNTAIN, effect: Meteor.TYPE.EFFECT.NEUTRAL},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.TNT, effect: Meteor.TYPE.EFFECT.NEUTRAL}
        }
    },
    #{
        nb_of_spanws: 3,
        spawn_sizes: #{1, 1, 1},
        meteors: #{
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_ANIMAL},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_MUSHROOM},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_VEGETAL}
        }
    },
    #{
        nb_of_spanws: 10,
        spawn_sizes: #{3, 2, 1, 2, 1, 1},
        meteors: #{
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_ANIMAL},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_MUSHROOM},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_VEGETAL},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_VEGETAL},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_VEGETAL},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_VEGETAL},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_VEGETAL},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_VEGETAL},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_VEGETAL},
            #{terraformation: Meteor.TYPE.TERRAFORMATION.NEUTRAL, effect: Meteor.TYPE.EFFECT.LIFE_VEGETAL}
        }
    }
}

let SPAWN_RANGES = #{
    #{from: 0, to: math.pi / 8},
    #{from: 3 * math.pi / 4, to: 7 * math.pi / 8},
    #{from: math.pi, to: 9 * math.pi / 8},
    #{from: 7 * math.pi / 4, to: 15 * math.pi / 8}
}

MeteorsManager.New = function() {
    return #{
        current_spawn_set: 0,
        spawn_stack: #{},
        spawn_number_stack: #{},
        alive_meteors: #{}
    }
}

MeteorsManager.Update = function(manager, dt, spawn_meteors) {
    for (let i, meteor in ##(manager.alive_meteors)) {
        Meteor.Update(meteor, dt);
    }

    if (spawn_meteors) {
        Spawn_meteors(manager);
    }
}

MeteorsManager.Draw = function(manager) {
    for (let i, meteor in ##(manager.alive_meteors)) {
        Meteor.Draw(meteor);
    }
}

MeteorsManager.Resolve_Planet_Collisions = function(manager, planet) {
	for(let i, meteor in ##(manager.alive_meteors))
	{
        let collides, index = Planet.Collides(planet, meteor);
        if (collides) {
            if (meteor.type_terraformation == Meteor.TYPE.TERRAFORMATION.MOUNTAIN) {
                Planet.Impact(planet, index, Meteor.DEFAULT_IMPACT_FORCE);
            }
            if (meteor.type_terraformation == Meteor.TYPE.TERRAFORMATION.TNT) {
                Planet.Impact(planet, index, -Meteor.DEFAULT_IMPACT_FORCE);
            }
            table.remove(manager.alive_meteors, i);
        }
	}
}

function Spawn_meteors(manager) {
    if (table.getn(manager.spawn_stack) <= 0) {
        let there_are_spawns_sets_left = Initiate_Stack(manager); 
        if (!there_are_spawns_sets_left) {
            return;
        }
    }

    let nb_of_meteors_to_generate = table.remove(manager.spawn_number_stack);
    
    let spawn_ranges_tmp = table.clone(SPAWN_RANGES);
    table.shuffle(spawn_ranges_tmp);

    for(let i = 1 ... nb_of_meteors_to_generate) {
        let origin = Get_Spawn(table.remove(spawn_ranges_tmp));
        table.insert(
            manager.alive_meteors,
            Get_Random_Meteor(manager, origin)
        );
    }
}

function Get_Random_Meteor(manager, origin) {
    let meteor_config = table.remove(manager.spawn_stack);

    return Meteor.New(
        meteor_config.terraformation, 
        meteor_config.effect, 
        origin
    );
}

function Initiate_Stack(manager) {
    manager.current_spawn_set ++;

    let spawn_set = METEORS_SPAWN_SETS[manager.current_spawn_set]; 

    if (spawn_set == nil) {
        return false;
    }

    manager.spawn_stack = table.clone(spawn_set.meteors);
    manager.spawn_number_stack = table.clone(spawn_set.spawn_sizes);
    
    table.shuffle(manager.spawn_stack);
    table.shuffle(manager.spawn_number_stack);

    return true;
}

function Get_Spawn(range) {
    let diff = range.to - range.from;
    let rnd = math.random();
    return range.from + diff * rnd;
}
Meteor = #;

Meteor.TYPE = #{
    TERRAFORMATION: #{
        MOUNTAIN: 0,
        TNT: 1,
        NEUTRAL: 2
    },
    EFFECT: #{
        NEUTRAL: 0,
        ICE: 1,
        LIFE_ANIMAL: 2,
        LIFE_MUSHROOM: 3,
        LIFE_VEGETAL: 4,
        ATMOSPHERE_OXYGEN: 5,
        ATMOSPHERE_CO2: 6,
        ATMOSPHERE_SPORES: 7, //lol

    }
}

Meteor.SPEED = 150;
Meteor.MIN_RADIUS = 8;
Meteor.MAX_RADIUS = 12;
Meteor.RADIUS = 10;
Meteor.ORIGIN_RADIUS = 830;
Meteor.NB_OF_VERTICES = 12;
Meteor.DEFAULT_IMPACT_FORCE = 20;

let Get_mesh = function(
    type_terraformation,
    type_effect
) 
{
	let mesh = love.graphics.newMesh(Meteor.NB_OF_VERTICES, 'fan', 'dynamic');

    let color = #{};

    if (type_terraformation == Meteor.TYPE.TERRAFORMATION.MOUNTAIN) { 
        color.r = 175; color.g = 121; color.b = 149;
    };
    if (type_terraformation == Meteor.TYPE.TERRAFORMATION.TNT) { 
        color.r = 255; color.g = 93; color.b = 0;
    };
    if (type_terraformation == Meteor.TYPE.TERRAFORMATION.NEUTRAL) { 
        color.r = 200; color.g = 200; color.b = 200;
    };

	for(let i = 1 ... Meteor.NB_OF_VERTICES)
	{
        let radius = Meteor.MIN_RADIUS + (Meteor.MAX_RADIUS - Meteor.MIN_RADIUS) * math.random();
		let h = math.rad(i * (360 / Meteor.NB_OF_VERTICES));
		mesh->setVertex(i,
			math.cos(h) * radius,
			math.sin(h) * radius,
			0, 0, color.r, color.g, color.b, 255
		);
	}

// setVertex

    return mesh;
}

Meteor.New = function(
    type_terraformation, 
    type_effect,
    origin
) 
{
    let draw_model = Get_mesh(
        type_terraformation,
        type_effect
    );

    let rotation_orientation;
    let rnd = math.random(2);

    if (rnd == 1) {
        rotation_orientation = 1;
    }
    else {
        rotation_orientation = -1;
    }

    return #{
        type_terraformation: type_terraformation,
        type_effect: type_effect,
        spawn: spawn,
        position: #{
            x: math.cos(origin) * Meteor.ORIGIN_RADIUS, 
            y: math.sin(origin) * Meteor.ORIGIN_RADIUS 
        },
        origin: origin,
        draw_model: draw_model,
        rotation: 0,
        rotation_orientation: rotation_orientation 
    };
}

Meteor.Draw = function(meteor) 
{
    love.graphics.draw(
        meteor.draw_model,
        meteor.position.x,
        meteor.position.y,
        meteor.rotation
    );
}

Meteor.Update = function(meteor, dt) 
{
    meteor.position.x -= math.cos(meteor.origin) * Meteor.SPEED * dt;   
    meteor.position.y -= math.sin(meteor.origin) * Meteor.SPEED * dt;
    meteor.rotation += dt * meteor.rotation_orientation;
    // meteor.rotation += dt;

    // meteor.position.x -= math.cos(meteor.origin) * Meteor.SPEED * 1;   
    // meteor.position.y -= math.sin(meteor.origin) * Meteor.SPEED * 1;   
}

Meteor.Delete = function(meteor)
{

}